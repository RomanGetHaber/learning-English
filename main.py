import json
import random
from tkinter import *
from tkinter import messagebox, ttk
from tkinter import ttk


class VocabularyApp:
    def __init__(self, master):
        self.master = master
        self.master.title("–£—á–∏–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞")
        self.master.geometry("400x300")
        # –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –¥–∞/–Ω–µ—Ç
        self.show_translation = True

        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è
        self.words = self.load_words()
        self.selected_words = []

        # –°–æ–∑–¥–∞–Ω–∏–µ GUI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.create_widgets()

    def create_widgets(self):
        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ —Å–ª–æ–≤
        Label(self.master, text="–ê–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ:").pack(pady=5)
        self.eng_entry = Entry(self.master, width=30)
        self.eng_entry.pack()

        Label(self.master, text="–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:").pack(pady=5)
        self.ru_entry = Entry(self.master, width=30)
        self.ru_entry.pack()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        self.setup_clipboard_shortcuts(self.eng_entry)
        self.setup_clipboard_shortcuts(self.ru_entry)


        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        Button(self.master, text="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", command=self.add_word).pack(pady=10)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
        Button(self.master, text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ–≤", command=self.show_words_window).pack(pady=5)
        Button(self.master, text="–£—á–∏—Ç—å —Å–ª–æ–≤–∞", command=self.start_learning).pack(pady=5)

    def setup_clipboard_shortcuts(self, widget):
        # –ü—Ä–∏–≤—è–∑–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è/–≤—Å—Ç–∞–≤–∫–∏
        widget.bind("<Control-KeyPress>", self.handle_ctrl_shortcut)

    def handle_ctrl_shortcut(self, event):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∫–ª–∞–≤–∏—à–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Ctrl
        if event.state & 0x0004:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ Ctrl –Ω–∞–∂–∞—Ç
            if event.keycode == 86:  # –§–∏–∑–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏—à–∞ V (–∞–Ω–≥–ª–∏–π—Å–∫–∞—è) / –ú (—Ä—É—Å—Å–∫–∞—è)
                self.paste_text(event)
                return "break"
            elif event.keycode == 67:  # –§–∏–∑–∏—á–µ—Å–∫–∞—è –∫–ª–∞–≤–∏—à–∞ C (–∞–Ω–≥–ª–∏–π—Å–∫–∞—è) / –° (—Ä—É—Å—Å–∫–∞—è)
                self.copy_text(event)
                return "break"


    def copy_text(self, event):
        event.widget.event_generate("<<Copy>>")

    def paste_text(self, event):
        event.widget.event_generate("<<Paste>>")


    def load_words(self):
        try:
            with open('words.json', 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return {}

    def save_words(self):
        with open('words.json', 'w') as f:
            json.dump(self.words, f, ensure_ascii=False)

    def add_word(self):
        eng = self.eng_entry.get().strip().lower()
        ru = self.ru_entry.get().strip().lower()

        if eng and ru:
            self.words[eng] = ru
            self.save_words()
            self.eng_entry.delete(0, END)
            self.ru_entry.delete(0, END)
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è!")

    def show_words_window(self):
        words_window = Toplevel(self.master)
        words_window.title("–í—ã–±–æ—Ä —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = Frame(words_window)
        main_frame.pack(padx=10, pady=10, fill=BOTH, expand=True)

        # –°–æ–∑–¥–∞–µ–º Canvas –∏ Scrollbar
        canvas = Canvas(main_frame)
        scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = Frame(canvas)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–ª–µ—Å–∞ –º—ã—à–∏ –∫–æ –≤—Å–µ–º—É –æ–∫–Ω—É
        def on_mousewheel(event):
            if event.delta:
                canvas.yview_scroll(int(-1 * (event.delta / 120)), "units")
            else:
                # –î–ª—è Linux
                if event.num == 4:
                    canvas.yview_scroll(-1, "units")
                elif event.num == 5:
                    canvas.yview_scroll(1, "units")

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        words_window.bind("<MouseWheel>", on_mousewheel)
        words_window.bind("<Button-4>", on_mousewheel)
        words_window.bind("<Button-5>", on_mousewheel)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤
        self.check_vars = {}
        self.check_widgets = []
        for eng, ru in self.words.items():
            var = BooleanVar()
            text = f"{eng} - {ru}" if self.show_translation else f"{eng} - ****"
            cb = Checkbutton(scrollable_frame,
                             text=text,
                             variable=var,
                             anchor="w",
                             width=30)
            cb.pack(fill="x", pady=2)
            self.check_widgets.append((cb, eng, ru))
            self.check_vars[eng] = var

        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = Frame(words_window)
        button_frame.pack(pady=10)

        Button(button_frame,
               text="üëÅÔ∏è",
               command=lambda: self.toggle_translation(words_window),
               width=5).pack(side=LEFT, padx=5)

        Button(button_frame,
               text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
               command=lambda: self.save_selection(words_window)).pack(side=LEFT, padx=5)

    def toggle_translation(self, window):
        self.show_translation = not self.show_translation
        for cb, eng, ru in self.check_widgets:
            new_text = f"{eng} - {ru}" if self.show_translation else f"{eng} - ****"
            cb.config(text=new_text)
        window.update()


    def save_selection(self, window):
        self.selected_words = [
            eng for eng, var in self.check_vars.items() if var.get()
        ]
        window.destroy()
        self.check_widgets = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∂–µ—Ç–æ–≤
        messagebox.showinfo("–í—ã–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω", f"–í—ã–±—Ä–∞–Ω–æ —Å–ª–æ–≤: {len(self.selected_words)}")


    def start_learning(self):
        if not self.selected_words:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!")
            return

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –æ–±—É—á–µ–Ω–∏—è
        learn_window = Toplevel(self.master)
        learn_window.title("–†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è")

        self.current_word = None
        self.correct_answer = None
        self.buttons = []

        # –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.word_label = Label(learn_window, text="", font=('Arial', 14))
        self.word_label.pack(pady=20)

        buttons_frame = Frame(learn_window)
        buttons_frame.pack()

        # –°–æ–∑–¥–∞–µ–º 6 –∫–Ω–æ–ø–æ–∫ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        for i in range(6):
            btn = Button(buttons_frame, text="", width=20,
                         command=lambda idx=i: self.check_answer(idx))
            btn.grid(row=i // 2, column=i % 2, padx=5, pady=5)
            self.buttons.append(btn)

        self.next_word(learn_window)

    def next_word(self, window):
        if not self.selected_words:
            messagebox.showinfo("–ö–æ–Ω–µ—Ü", "–í—ã –∏–∑—É—á–∏–ª–∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞!")
            window.destroy()
            return

        self.current_word = random.choice(self.selected_words)
        self.selected_words.remove(self.current_word)
        self.word_label.config(text=self.current_word)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        correct = self.words[self.current_word]
        wrongs = [v for k, v in self.words.items()
                  if k != self.current_word and v != correct]
        random.shuffle(wrongs)

        answers = [correct] + wrongs[:5]
        random.shuffle(answers)
        self.correct_answer = answers.index(correct)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        for i, btn in enumerate(self.buttons):
            btn.config(text=answers[i] if i < len(answers) else "", bg='SystemButtonFace')

    def check_answer(self, button_idx):
        if button_idx == self.correct_answer:
            self.buttons[button_idx].config(bg='green')
            self.master.after(1000, self.next_word, self.master.winfo_children()[-1])
        else:
            self.buttons[button_idx].config(bg='red')


if __name__ == "__main__":
    root = Tk()
    app = VocabularyApp(root)
    root.mainloop()